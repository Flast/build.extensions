#             Copyright Kohei Takahashi 2013.
#    Distributed under the Boost Software License, Version 1.0.
#       (See accompanying file LICENSE_1_0.txt or copy at
#             http://www.boost.org/LICENSE_1_0.txt)

import "class" : new ;
import container ;
import common ;
import feature : feature ;
import generators ;
import numbers ;
import os ;
import sequence ;
import toolset ;
import unix ;

feature.extend toolset : $(__name__) ;
toolset.inherit-generators $(__name__) : unix : unix.link unix.link.dll ;
toolset.inherit $(__name__) : unix ;

generators.override $(__name__).prebuilt : builtin.lib-generator ;
generators.override $(__name__).prebuilt : builtin.prebuilt ;
generators.override $(__name__).searched-lib-generator : searched-lib-generator ;

rule init ( options * )
{
    local condition = [ common.check-init-parameters $(__name__) ] ;
    local commands = [ command-from-environment ] ;
    handle-options $(__name__) : $(condition) : $(commands) : $(options) ;
    handle-environment-options $(__name__) : $(condition) : $(commands) ;

    export-actions $(commands) ;
}

local rule make-node ( values * )
{
    local result ;
    for local v in $(values)
    {
        result += [ class.new node $(v) ] ;
    }
    return $(result) ;
}

local rule command-from-environment ( )
{
    return [ class.new vector
        [ class.new vector [ make-node compile.c   CC  <cflags>   ] ]
        [ class.new vector [ make-node compile.c++ CXX <cxxflags> ] ]
      ] ;
}

local rule handle-options ( toolset : condition * : commands : options * )
{
    for local i in [ numbers.range [ $(commands).size ] ]
    {
        local rule_name = [ $(commands).get-at $(i) : 1 ] ;
        local env       = [ $(commands).get-at $(i) : 2 ] ;
        local feature   = [ $(commands).get-at $(i) : 3 ] ;

        toolset.flags $(toolset).$(rule_name) CONFIG_COMMAND $(condition)
          : [ os.environ $(env) ]
          : unchecked
          ;
        toolset.flags $(toolset).$(rule_name) OPTIONS $(condition)
          : [ feature.get-values $(feature) : $(options) ]
          : unchecked
          ;
    }
}

local rule unchecked-toolset-flags ( rule env : variable-name condition * : default ? )
{
    local value = [ os.environ BBV2_EXT_$(env)_$(variable-name) ] ;
    value ?= $(default) ;
    toolset.flags $(toolset).$(rule) $(variable-name) : $(value) : unchecked ;
}
local rule handle-environment-options ( toolset : condition * : commands )
{
    for local i in [ numbers.range [ $(commands).size ] ]
    {
        local rule_name = [ $(commands).get-at $(i) : 1 ] ;
        local env       = [ $(commands).get-at $(i) : 2 ] ;

        unchecked-toolset-flags $(rule_name) $(env) : OUTPUT_FLAG $(condition) : -o ;
        unchecked-toolset-flags $(rule_name) $(env) : MODE_FLAG   $(condition) : -c ;
    }
}

local rule export-actions ( commands )
{
    for local i in [ numbers.range [ $(commands).size ] ]
    {
        local rule_name = [ $(commands).get-at $(i) : 1 ] ;
        IMPORT $(__name__) : default-compile : : $(__name__).$(rule_name) ;
    }
}

local rule default-compile ( target * : sources * : properties * )
{
}
actions default-compile
{
    "$(CONFIG_COMMAND)" $(OPTIONS) "$(MODE_FLAG)" "$(OUTPUT_FLAG)" "$(<)" "$(>)"
}

class ENV-compiling-generator : generator
{
    rule action-class ( )
    {
        return compile-action ;
    }
}

local rule register-env-compiler ( id : source-types + : target-types + : requirements *
  : optional-properties * )
{
    generators.register [ new ENV-compiling-generator $(id) : $(source-types)
      : $(target-types) : $(requirements) : $(optional-properties) ] ;
}

IMPORT $(__name__) : register-env-compiler : : generators.register-env-compiler ;

register-env-compiler $(__name__).compile.c   : C   : OBJ : <toolset>$(__name__) ;
register-env-compiler $(__name__).compile.c++ : CPP : OBJ : <toolset>$(__name__) ;
