#             Copyright Kohei Takahashi 2012-2013.
#    Distributed under the Boost Software License, Version 1.0.
#       (See accompanying file LICENSE_1_0.txt or copy at
#             http://www.boost.org/LICENSE_1_0.txt)

import "class" : new ;
import common ;
import errors ;
import feature : feature ;
import generators ;
import modules ;
import toolset : flags ;
import unix ;

if [ MATCH (--debug-configuration) : [ modules.peek : ARGV ] ]
{
    .debug-configuration = true ;
}

feature.extend toolset : $(__name__) ;
generators.override $(__name__).prebuilt : builtin.lib-generator ;
generators.override $(__name__).prebuilt : builtin.prebuilt ;
generators.override $(__name__).searched-lib-generator : searched-lib-generator ;

rule init ( command * : options * )
{
    local tool-command ;
    if $(command)
    {
        tool-command = [ common.get-invocation-command-nodefault $(__name__) : nvcc : $(command) ] ;
        if ! $(tool-command)
        {
            errors.error "toolset nvcc initialization:"
              : "provided command '$(command)' not found"
              : "initialized from" [ errors.nearest-user-location ] ;
        }
    }
    else
    {
        tool-command = [ common.get-invocation-command-nodefault $(__name__) : nvcc ] ;
        if ! $(tool-command)
        {
            errors.error "toolset nvcc initialization:"
              : "default command 'nvcc' not found"
              : "initialized from" [ errors.nearest-user-location ] ;
        }
    }
    local command = $(tool-command) ;

    local version = [ MATCH "release ([0-9].[0-9])" : [ SHELL "$(command) -V" ] ] ;

    local condition = [ common.check-init-parameters $(__name__)
                          : version $(version) ] ;

    handle-options $(__name__) : $(condition) : $(command) : $(options) ;
}

local rule handle-options ( toolset : condition * : command * : options * )
{
    common.handle-options $(toolset) : $(condition) : $(command) : $(options) ;

    flags $(__name__).compile.cu OPTIONS $(condition)
      : [ feature.get-values cuflags : $(options) ] : unchecked ;
}


flags $(__name__).compile OPTIONS <address-model>32 : -m32 ;
flags $(__name__).compile OPTIONS <address-model>64 : -m64 ;

flags $(__name__).compile OPTIONS <debug-symbols>on : -g ;

flags $(__name__).compile DEFINES <define> ;
flags $(__name__).compile INCLUDES <include> ;


generators.register-c-compiler $(__name__).compile.c
                                : C
                                : OBJ
                                : <toolset>$(__name__) ;
generators.register-c-compiler $(__name__).compile.c.preprocess
                                : C
                                : PREPROCESSED_C
                                : <toolset>$(__name__) ;
generators.register-c-compiler $(__name__).compile.c++
                                : CPP
                                : OBJ
                                : <toolset>$(__name__) ;
generators.register-c-compiler $(__name__).compile.c++.preprocess
                                : CPP
                                : PREPROCESSED_CPP
                                : <toolset>$(__name__) ;

flags $(__name__).compile.c USER_OPTIONS <cflags> ;
flags $(__name__).compile.c++ USER_OPTIONS <cxxflags> ;

actions compile.c
{
    "$(CONFIG_COMMAND)" -x c $(OPTIONS) $(USER_OPTIONS) -D$(DEFINES) -I"$(INCLUDES)" -c -o "$(<)" "$(>)"
}
actions compile.c.preprocess
{
    "$(CONFIG_COMMAND)" -x c $(OPTIONS) $(USER_OPTIONS) -D$(DEFINES) -I"$(INCLUDES)" -E -o "$(<)" "$(>)"
}

actions compile.c++
{
    "$(CONFIG_COMMAND)" -x c++ $(OPTIONS) $(USER_OPTIONS) -D$(DEFINES) -I"$(INCLUDES)" -c -o "$(<)" "$(>)"
}
actions compile.c++.preprocess
{
    "$(CONFIG_COMMAND)" -x c++ $(OPTIONS) $(USER_OPTIONS) -D$(DEFINES) -I"$(INCLUDES)" -E -o "$(<)" "$(>)"
}


generators.register-c-compiler $(__name__).compile.cu
                                : CUDA
                                : OBJ
                                : <toolset>$(__name__) ;
generators.register-c-compiler $(__name__).compile.cu.ptx
                                : CUDA
                                : PTX
                                : <toolset>$(__name__) ;
generators.register-c-compiler $(__name__).compile.cu.cubin
                                : CUDA
                                : CUBIN
                                : <toolset>$(__name__) ;

feature cuflags : : free optional ;
feature device-debug-symbols : off on : propagated ;

flags $(__name__).compile.cu USER_OPTIONS <cuflags> ;
flags $(__name__).compile.cu OPTIONS <device-debug-symbols>on : -G ;

actions compile.cu
{
    "$(CONFIG_COMMAND)" -x cu $(OPTIONS) $(USER_OPTIONS) -D$(DEFINES) -I"$(INCLUDES)" -c -o "$(<)" "$(>)"
}

actions compile.cu.ptx
{
    "$(CONFIG_COMMAND)" -x cu $(OPTIONS) $(USER_OPTIONS) -D$(DEFINES) -I"$(INCLUDES)" --ptx -o "$(<)" "$(>)"
}

actions compile.cu.cubin
{
    "$(CONFIG_COMMAND)" -x cu $(OPTIONS) $(USER_OPTIONS) -D$(DEFINES) -I"$(INCLUDES)" --cubin -o "$(<)" "$(>)"
}


generators.register [ new unix-linking-generator $(__name__).link
                        : OBJ LIB
                        : EXE
                        : <toolset>$(__name__) ] ;
generators.register [ new unix-linking-generator $(__name__).link.dll
                        : OBJ LIB
                        : SHARED_LIB
                        : <toolset>$(__name__) ] ;

flags $(__name__).link LINKPATH <library-path> ;
flags $(__name__).link LIBRARIES <library-file> ;
flags $(__name__).link OPTIONS <linkflags> ;

actions link bind LIBRARIES
{
    "$(CONFIG_COMMAND)" $(OPTIONS) $(USER_OPTIONS) -L"$(LINKPATH)" -o "$(<)" "$(>)" $(LIBRARIES)
}

actions link.dll bind LIBRARIES
{
    "$(CONFIG_COMMAND)" $(OPTIONS) $(USER_OPTIONS) -L"$(LINKPATH)" --shared -o "$(<)" "$(>)" $(LIBRARIES)
}


generators.register [ new unix-archive-generator $(__name__).archive
                        : OBJ
                        : STATIC_LIB
                        : <toolset>$(__name__) ] ;

flags $(__name__).archive AROPTIONS <archiveflags> ;

actions piecemeal archive
{
    "$(CONFIG_COMMAND)" $(AROPTIONS) --lib -o "$(<)" "$(>)" $(LIBRARIES)
}
