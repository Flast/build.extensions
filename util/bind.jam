#             Copyright Kohei Takahashi 2012.
#    Distributed under the Boost Software License, Version 1.0.
#       (See accompanying file LICENSE_1_0.txt or copy at
#             http://www.boost.org/LICENSE_1_0.txt)

import "class" ;
import indirect ;
import numbers ;

class extensions/bind--base # abstract
{
    rule __init__ ( )
    {
        self.range = [ numbers.range 1 19 ] ;
    }

    local rule is-binding ( arg )
    {
        local trim-exec = [ MATCH ^(.*)\.exec$ : $(arg) ] ;
        if $(trim-exec)
        {
            return [ class-is-a $(trim-exec) : extensions/bind--binder ] ;
        }
    }

    local rule binding-rule ( x )
    {
        if ! [ is-binding $(x) ]
        {
            import errors ;
            errors.error "expected a binding object, but got \"$(x)\"" ;
        }
    }

    local rule class-is-a ( instance : type )
    {
        import modules ;

        # class.is-a will fail if $(instance) is 'instance'.rule . So if
        # $(instance) is equal to 'instance'.rule style strings, following
        # cond will fail and class.is-a will not be called.
        if [ modules.peek $(instance) : __class__ ]
        {
            return [ class.is-a $(instance) : $(type) ] ;
        }
    }
}

class extensions/bind--placeholder
{
    rule __init__ ( number )
    {
        self.number = $(number) ;
    }

    rule number ( )
    {
        return $(self.number) ;
    }
}

rule placeholder ( number )
{
    return [ class.new extensions/bind--placeholder $(number) ] ;
}

rule _1 ( ) { return [ placeholder 1 ] ; }
rule _2 ( ) { return [ placeholder 2 ] ; }
rule _3 ( ) { return [ placeholder 3 ] ; }
rule _4 ( ) { return [ placeholder 4 ] ; }
rule _5 ( ) { return [ placeholder 5 ] ; }
rule _6 ( ) { return [ placeholder 6 ] ; }
rule _7 ( ) { return [ placeholder 7 ] ; }
rule _8 ( ) { return [ placeholder 8 ] ; }
rule _9 ( ) { return [ placeholder 9 ] ; }

class extensions/bind--args-expander : extensions/bind--base
{
    import "class" ;
    import numbers ;

    rule __init__ ( a )
    {
        extensions/bind--base.__init__ ;
        self.a = $(a) ;
    }

    rule exec ( arg )
    {
        if [ class-is-a $(arg) : extensions/bind--placeholder ]
        {
            arg = [ $(self.a).get-at [ $(arg).number ] ] ;
        }
        return $(arg) ;
    }
}

class extensions/bind--binder : extensions/bind--base
{
    import "class" ;
    import numbers : increment ;
    import sequence : filter ;
    import indirect ;

    rule __init__ ( indirect : args )
    {
        extensions/bind--base.__init__ ;
        self.indirect = $(indirect) ;
        self.args = $(args) ;
    }

    local rule geq ( a b )
    {
        return [ numbers.less $(b) $(a) ] ;
    }

    local rule eval-rule ( rule + : a )
    {
        local _$(self.range) ;
        for local i in [ filter geq [ increment [ $(a).size ] ] : $(self.range) ]
        {
            _$(i) = [ $(a).get-at $(i) ] ;
        }
        return [ $(rule) $(_1) : $(_2) : $(_3) : $(_4) : $(_5) : $(_6) : $(_7)
                  : $(_8) : $(_9) : $(_10) : $(_11) : $(_12) : $(_13) : $(_14)
                  : $(_15) : $(_16) : $(_17) : $(_18) : $(_19) ] ;
    }

    local rule process-arg ( expander a arg )
    {
        if [ is-binding $(arg) ]
        {
            return [ eval-rule $(arg) : $(a) ] ;
        }
        else
        {
            return [ $(expander).exec $(arg) ] ;
        }
    }

    rule exec-vector ( a )
    {
        local expander = [ class.new extensions/bind--args-expander $(a) ] ;

        local params = [ class.new vector ] ;
        for local i in $(self.range)
        {
            local result = [ sequence.transform process-arg $(expander) $(a)
                              : [ $(self.args).get-at $(i) ] ] ;
            $(params).push-back [ class.new vector $(result) ] ;
        }

        return [ eval-rule indirect.call $(self.indirect) : $(params) ] ;
    }

    rule exec ( * )
    {
        local a = [ class.new vector ] ;
        for local i in $(self.range)
        {
            $(a).push-back [ class.new vector $($(i)) ] ;
        }

        return [ exec-vector $(a) ] ;
    }
}

local rule make-binder ( indirect : args )
{
    local b = [ class.new extensions/bind--binder $(indirect) : $(args) ] ;
    return $(b).exec ;
}

rule binding ( rulename arg * : * )
{
    local r = [ indirect.make $(rulename) : [ CALLER_MODULE ] ] ;

    local args = [ class.new vector [ class.new vector $(arg) ] ] ;
    for local i in [ numbers.range 2 19 ]
    {
        $(args).push-back [ class.new vector $($(i)) ] ;
    }

    return [ make-binder $(r) : $(args) ] ;
}

class extensions/bind--protect : extensions/bind--base
{
    rule __init__ ( [binding-rule] b )
    {
        extensions/bind--base.__init__ ;
        self.b = $(b) ;
    }

    rule exec ( * )
    {
        local a = [ class.new vector ] ;
        for local i in $(self.range)
        {
            $(a).push-back [ class.new vector $($(i)) ] ;
        }

        return [ $(self.b)-vector $(a) ] ;
    }
}

rule protect ( b )
{
    return [ class.new extensions/bind--protect $(b) ] ;
}

rule protected-binding ( * )
{
    return [ protect [ binding $(1) : $(2) : $(3) : $(4) : $(5) : $(6) : $(7)
                        : $(8) : $(9) : $(10) : $(11) : $(12) : $(13) : $(14)
                        : $(15) : $(16) : $(17) : $(18) : $(19) ] ] ;
}
